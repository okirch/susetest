.\" Process this file with
.\" groff -man -Tascii $FILENAME
.\"
.\"
.TH TWOPENCE-RUN-TEST "1" "@DATE@" "@SUSETEST_VERSION@" "twopence test runner"
.SH NAME
twopence run-test \- helper application for running twopence based tests
.SH SYNOPSIS
.BI "twopence run-test --platform " PLATFORM " [ " options " ] " "test1 test2 ...
.BI "twopence run-test --os " OS " [ " options " ] " "test1 test2 ...
.SH DESCRIPTION
This utility runs a twopence based test case, taking care of provisioning
the required nodes with the desired platform. It relies on
.BR twopence-provision (1)
for managing the bring-up and teardown of the SUT nodes.
.P
A test case is a configuration file that describes the test topology, and a
.B run
script that contains the actual code that performs the test. In its simplest
form, the configuration file provides the name of the test case, and a list
of SUTs to be configured:
.P
.nf
.in +2
\fB
testcase        "shadow";
node client {}
\fR
.in
.fi
.P
Optionally, a \fBnode\fP statement can contain additional configuration, such as
extra test packages to be installed.
For multi-node tests, the configuration file would contain several \fBnode\fP
statements.
.P
While the test topology is provisioned, and during the execution of the
test script, temporary files are stored in a \fIworkspace\fP directory.
The default location is
.BR ~/susetest/work .
.P
When the test case is complete, a test report is written to the \fIlogspace\fP
directory. This test report is an XML file that loosely follows the JUnit
schema. This allows further automated processing of the test results, such
as fingerprinting of failures (is this a known failure, or a new one?),
aggregation (computing pass/fail rate), or comparison (are there regressions
versus a previous release?).
.P
The default location of the test report is
.BR ~/susetest/logs/\fITESTCASE\fP/junit-results.xml .
.SS Selecting the Operating System
The operating system plus its configuration plus a set of configurable options
are called a \fIplatform\fP throughout this documentation. Using the
.BR "twopence build-image
copmmand, it is possible to create silver images of an operating system
with some features already pre-provisioned.
You can list all available platforms using the
.BR "twopence list-platforms
command.
.P
.B Run-test
supports two approaches for selecting the platform to install on the SUTs.
The more direct approach is to specify the desired platform using the
\fB--platform\fP option. In addition, you can specify one or more build
options via the \fB--feature\fP command line option; these will then be
applied while provisioning the SUT.
.P
Alternatively, you can select the underlying operating system using the
\fB--os\fP option, plus the list of desired build options via \fB--feature\fP.
This will scan all available platforms and select the one that (a) matches
the requested OS, and (b) provides the largest subset of the requested
features. If there is a platform that matches exactly, then it's used as-is
to provision the SUTs. If the platform lacks one or more of the requested
features, these will be applied while provisioning the SUT.
.P
In consequence, the following two invocations will achieve exactly the same
result:
.P
.nf
.in +2
\fB
# twopence run-test --platform leap-15.4-selinux-twopence shadow
# twopence run-test --os Leap-15.4 --feature selinux shadow
\fR
.in
.fi
.P
The latter is slightly more flexible because it will also work in the case
where there's no silver image that already has selinux enabled.
.P
In addition,
.BR twopence-run-test
provides a set of options that let you run multi-node tests with a mix of
different operating systems:
.BR --role-os ,
.BR --role-platform ", and 
.BR --role-feature ", respectively.
These options apply to all nodes of the same role, rather than to all nodes in general.
.P
A multinode testcase can specify a role for each node that it uses. If not specified
explicitly, a node's role name is set to the node's name, i.e. a node named
\fBserver\fP has the role \fBserver\fP, by default.
.P
You can specify the requested OS for given role (say, \fBclient\fP) by using
.BR --role-os client=Centos-8.3 .
The following invocation provisions the client node(s) with Centos-8.3 and the
server with Leap-15.4, enabling SELinux on both client and server:
.P
.in +2
.B "twopence run-test --os Leap-15.4 --role-os client=Centos-8.3 --feature selinux ssh
.in
.P
.SH OPTIONS
.TP
.BI --platform " PLATFORM\fR, " --role-platform " ROLE" = PLATFORM
This option specifies the platform with which to provision the SUT nodes.
See the previous section for a discussion.
.TP
.BI --os " OS\fR, " --role-os " ROLE" = OS
This option specifies the platform with which to provision the SUT nodes.
See the previous section for a discussion.
.TP
.BI --feature " BUILDOPTION\fR, " --role-feature " ROLE" = BUILDOPTION
This instructs the provisioner to enable \fIBUILDOPTION\fP on SUT
nodes. Typical build options would be \fBselinux\fP or \fBfips\fP, for
instance.
.IP
Note that \fBrun-test\fP will silently append \fBtwopence\fP to the
build options, which instructs the provisioner to install the twopence
SUT infrastrucutre on the node.
.TP
.BI "--parameter " name = value
Provide additional parameters to the test run. For example, when executing
a test case with SELinux enabled, the test user can be assigned to different
SELinux user profiles. This can be achieved by running the same test case
several times, with different values for the
.B selinux-testuser
parameter (such as
.BR staff_u ", " user_u ", etc.)
.TP
.BI "--matrix " MATRIX
Run the test case repeatedly, with different parameters as specified by
the test matrix. See
.BR twopence-testmatrix (5)
for details.
.P
.\" -----------------------------
.SS Options controlling image selection
.TP
.BI "--gold-only
Instructs \fBrun-test\fP to ignore any silver images (ie images that were
built by the user using \fBtwopence-build-image\fP(1).)
.TP
.BR "--update-images" ", " --no-update-images
Instructs \fBrun-test\fP whether to update images from upstream repositories
(such as container registries, vagrantcloud) to the latest version available,
or to use whatever version has been downloaded previously.
.IP
If neither option is provided, the backend will select a default behavior
(which, for podman and vagrant, is to not update).
.P
.\" -----------------------------
.SS Options controlling execution
.TP
.BI --dry-run
Do not execute anything, but display the commands that would be executed.
.TP
.BI --interactive
In interactive mode,
.BR run-test
will pause after each step. This is mostly useful when developing new
test cases, or diagnosing failed tests. More information on interactive mode
can be found in section
.B Interactive Mode
below.
.TP
.BI --quiet
By default, \fBrun-test\fP displays the output of provisioning and test execution
commands, which is useful for monitoring progress. In order to suppress this, you
can invoke the test runner with the
.BR --quiet
option.
.TP
.BI --workspace " WORKSPACE
Specify an alternative workspace directory.
The default location is
.BR ~/susetest/work .
.TP
.BI --logspace " LOGSPACE
Specify an alternative directory for storing test reports.
The default location is
.BR ~/susetest/logs .
.TP
.BI --testrun " TESTRUN
Specify a name for a test run, ie a group of test cases that belong together.
When specifying this option, test reports are stored as
.BI "" TESTRUN / TESTCASE /junit-results.xml
below the logspace directory.
.TP
.BR "--clobber" ", " --no-clobber
Instructs \fBrun-test\fP whether to check for existing test results.
The default is to just overwrite the test report from a previous test run.
When running with \fB--no-clobber\fP, \fBrun-test\fP will print an error message
and exit if it detects an existing test report.
.P
.\" ----------------------------------------
.SS Interactive Mode
In interactive mode, the user is prompted for a command after each provisioning step.
Typing
.B help
will display the list of available commands. Command history and
completion is available. Note that the list of available commands depends
at which stage of execution we are.
.P
Typical use cases of interactive mode include:
.TP
.B Before provisioning:
Manually tweak \fBtestrun.conf\fP in the workspace directory.
.TP
.B After provisioning:
Log into one of the SUTs. Simply typing
.BI ssh " nodname"
at the prompt will start a shell session on the indicated SUT.
For vagrant based provisioning, for instance, this will open a
session as user \fBvagrant\fP, from which you have access to a root
shell using \fBsudo bash\fP.
.TP
.B After the test run:
If you are debugging a test script, it can be useful to re-run the script
after modifying it. There are two ways to do this. One is to run the
script manually, but the more convenient way is to type the
\fBrerun\fP command at the interactive prompt.
.IP
To run your test script manually, type something like this:
.IP
.BI "  ./run --config ~/susetest/work/" TESTCASE "/status.conf
.IP
where \fITESTCASE\fP is the name of the test case as provided in the
test's config file. In addition, you can restrict which test cases get
executed, by supplying command line options like
.BR "--only selinux.*" ", " or "--only shadow.chfn" .
The names supplied to this option specify a group/test combination.
.P
The following commands are available at any stage:
.TP
.B help
Display help message, and list of available commands.
.TP
.B continue
Proceed to the next step. Pressing Ctrl-D does the same thing.
.TP
.B abort
Abort the test run and clean up the workspace.
.TP
.B finish
Process all remaining stages of the test run non-interactively.
.TP
.B inspect
Display information on the test case being executed.
.SH SEE ALSO
.BR twopence-provision (1),
.BR twopence-list-platforms (1),
.BR twopence-build-image (1).
